name: Trivy IaC Security Scan

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  trivy-iac-scan:
    name: Trivy IaC Security Scan
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy IaC scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: 'example_app/learn-terraform-provision-eks-cluster'
        format: 'sarif'
        output: 'trivy-iac-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM,LOW,UNKNOWN'
        exit-code: '0'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-iac-results.sarif'
        category: 'trivy-iac-scan'

    - name: Run Trivy IaC scan (table format)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: 'example_app/learn-terraform-provision-eks-cluster'
        format: 'table'
        severity: 'CRITICAL,HIGH,MEDIUM,LOW,UNKNOWN'
        output: 'trivy-iac-results.txt'

    - name: Display scan results
      if: always()
      run: |
        echo "=== Trivy IaC Scan Results ==="
        if [ -f trivy-iac-results.txt ]; then
          cat trivy-iac-results.txt
        else
          echo "No IaC security issues found!"
        fi

    - name: Close alerts for fixed issues
      uses: actions/github-script@v7
      continue-on-error: true
      if: always()
      with:
        script: |
          try {
            const fs = require('fs');
            
            // Wait for SARIF upload to process
            await new Promise(resolve => setTimeout(resolve, 10000));
            
            // Read current scan results to see what issues were found
            let scanHasAnyIssues = false;
            if (fs.existsSync('trivy-iac-results.txt')) {
              const scanContent = fs.readFileSync('trivy-iac-results.txt', 'utf8');
              console.log('Scan file found, checking for issues...');
              
              // Check if scan has any security issues
              scanHasAnyIssues = scanContent.includes('CRITICAL') || 
                                scanContent.includes('HIGH') || 
                                scanContent.includes('MEDIUM') ||
                                scanContent.includes('LOW');
              
              console.log(`Current scan has issues: ${scanHasAnyIssues}`);
            } else {
              console.log('‚ùå Scan results file not found, assuming no issues');
            }
            
            // Get all current open alerts
            const openAlerts = await github.rest.codeScanning.listAlertsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            
            console.log(`Found ${openAlerts.data.length} open alerts to evaluate`);
            
            let closedCount = 0;
            let keptOpenCount = 0;
            
            for (const alert of openAlerts.data) {
              const ruleId = alert.rule?.id;
              const alertDescription = alert.rule?.description || alert.most_recent_instance?.message?.text || '';
              
              console.log(`Evaluating alert #${alert.number}: ${ruleId}`);
              
              if (!scanHasAnyIssues) {
                // No issues in current scan, close this alert
                try {
                  await github.rest.codeScanning.updateAlert({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    alert_number: alert.number,
                    state: 'dismissed',
                    dismissed_reason: 'false_positive',
                    dismissed_comment: 'Issue appears to be fixed - not found in current scan'
                  });
                  console.log(`‚úÖ Closed alert #${alert.number} (issue appears fixed)`);
                  closedCount++;
                } catch (error) {
                  console.log(`‚ùå Failed to close alert #${alert.number}: ${error.message}`);
                }
              } else {
                console.log(`‚úì Keeping alert #${alert.number} open (issues still exist in scan)`);
                keptOpenCount++;
              }
            }
            
            console.log(`\nüìä Alert cleanup summary:`);
            console.log(`   Alerts closed (fixed): ${closedCount}`);
            console.log(`   Alerts kept open (persistent): ${keptOpenCount}`);
            
          } catch (error) {
            console.log('‚ùå Error in alert cleanup logic:', error.message);
          }

    - name: Archive scan results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: trivy-iac-scan-results
        path: |
          trivy-iac-results.sarif
          trivy-iac-results.txt
        retention-days: 30
