name: Trivy IaC Security Scan

# This workflow scans Terraform configurations for security issues
# and uploads results to GitHub Security tab

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  trivy-iac-scan:
    name: Trivy IaC Security Scan
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      security-events: write
      actions: read
      pull-requests: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy IaC scan (SARIF format)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: 'example_app/terraform-aws-eks'
        format: 'sarif'
        output: 'trivy-iac-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM,LOW,UNKNOWN'
        exit-code: '0'

    - name: Run Trivy IaC scan (table format for PR comment)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: 'example_app/terraform-aws-eks'
        format: 'table'
        severity: 'CRITICAL,HIGH,MEDIUM,LOW,UNKNOWN'
        output: 'trivy-iac-results.txt'
        exit-code: '0'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-iac-results.sarif'
        category: 'trivy-iac-scan'

    - name: Parse scan results for PR comment
      if: github.event_name == 'pull_request'
      run: |
        echo "TRIVY_RESULTS<<EOF" >> $GITHUB_ENV
        if [ -f trivy-iac-results.txt ] && [ -s trivy-iac-results.txt ]; then
          # Count issues by severity
          CRITICAL=$(grep -c "CRITICAL" trivy-iac-results.txt || echo "0")
          HIGH=$(grep -c "HIGH" trivy-iac-results.txt || echo "0")
          MEDIUM=$(grep -c "MEDIUM" trivy-iac-results.txt || echo "0")
          LOW=$(grep -c "LOW" trivy-iac-results.txt || echo "0")
          
          echo "## üîí Trivy IaC Security Scan Results"
          echo ""
          echo "**Scan Target:** \`example_app/terraform-aws-eks\`"
          echo ""
          echo "### üìä Issue Summary"
          echo "| Severity | Count |"
          echo "|----------|-------|"
          echo "| üî¥ Critical | $CRITICAL |"
          echo "| üü† High | $HIGH |"
          echo "| üü° Medium | $MEDIUM |"
          echo "| üîµ Low | $LOW |"
          echo ""
          
          if [ $CRITICAL -gt 0 ] || [ $HIGH -gt 0 ]; then
            echo "‚ö†Ô∏è **Action Required:** Critical or High severity issues found!"
            echo ""
          fi
          
          echo "### üìã Detailed Results"
          echo "\`\`\`"
          cat trivy-iac-results.txt
          echo "\`\`\`"
          echo ""
          echo "---"
          echo "üìã **Full results available in [Security tab](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/security/code-scanning)**"
        else
          echo "## ‚úÖ Trivy IaC Security Scan Results"
          echo ""
          echo "**Scan Target:** \`example_app/terraform-aws-eks\`"
          echo ""
          echo "üéâ **No security issues found!** Your infrastructure configuration looks secure."
          echo ""
          echo "---"
          echo "üìã **Scan details available in [Security tab](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/security/code-scanning)**"
        fi
        EOF

    - name: Comment PR with scan results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const issue_number = context.issue.number;
          
          // Delete previous Trivy comments to avoid spam
          const comments = await github.rest.issues.listComments({
            owner,
            repo,
            issue_number,
          });
          
          for (const comment of comments.data) {
            if (comment.body.includes('üîí Trivy IaC Security Scan Results') || 
                comment.body.includes('‚úÖ Trivy IaC Security Scan Results')) {
              await github.rest.issues.deleteComment({
                owner,
                repo,
                comment_id: comment.id,
              });
            }
          }
          
          // Post new comment
          await github.rest.issues.createComment({
            owner,
            repo,
            issue_number,
            body: process.env.TRIVY_RESULTS
          });

    - name: Display scan results
      if: always()
      run: |
        echo "=== Trivy IaC Scan Results ==="
        if [ -f trivy-iac-results.txt ] && [ -s trivy-iac-results.txt ]; then
          cat trivy-iac-results.txt
        else
          echo "No IaC security issues found!"
        fi

    - name: Archive scan results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: trivy-iac-scan-results
        path: |
          trivy-iac-results.sarif
          trivy-iac-results.txt
        retention-days: 30
