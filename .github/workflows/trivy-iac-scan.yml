name: Trivy IaC Security Scan

# This workflow scans Terraform configurations for security issues
# and uploads results to GitHub Security tab

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  trivy-iac-scan:
    name: Trivy IaC Security Scan
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      security-events: write
      actions: read
      pull-requests: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy IaC scan (SARIF format)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: 'example_app/terraform-aws-eks'
        format: 'sarif'
        output: 'trivy-iac-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM,LOW,UNKNOWN'
        exit-code: '0'

    - name: Run Trivy IaC scan (table format for PR comment)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: 'example_app/terraform-aws-eks'
        format: 'table'
        severity: 'CRITICAL,HIGH,MEDIUM,LOW,UNKNOWN'
        output: 'trivy-iac-results.txt'
        exit-code: '0'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-iac-results.sarif'
        category: 'trivy-iac-scan'

    - name: Parse scan results for PR comment
      if: github.event_name == 'pull_request'
      run: |
        if [ -f trivy-iac-results.txt ] && [ -s trivy-iac-results.txt ]; then
          # Count issues by severity (handle case where grep finds nothing)
          CRITICAL=$(grep -c "CRITICAL" trivy-iac-results.txt || true)
          HIGH=$(grep -c "HIGH" trivy-iac-results.txt || true)
          MEDIUM=$(grep -c "MEDIUM" trivy-iac-results.txt || true)
          LOW=$(grep -c "LOW" trivy-iac-results.txt || true)
          
          # Ensure counts are numeric
          CRITICAL=${CRITICAL:-0}
          HIGH=${HIGH:-0}
          MEDIUM=${MEDIUM:-0}
          LOW=${LOW:-0}
          
          # Create the PR comment content in a file to avoid environment variable issues
          cat > pr_comment.md << 'COMMENT_EOF'
        ## 🔒 Trivy IaC Security Scan Results

        **Scan Target:** `example_app/terraform-aws-eks`

        ### 📊 Issue Summary
        | Severity | Count |
        |----------|-------|
        | 🔴 Critical | CRITICAL_COUNT |
        | 🟠 High | HIGH_COUNT |
        | 🟡 Medium | MEDIUM_COUNT |
        | 🔵 Low | LOW_COUNT |

        CRITICAL_WARNING

        ### 📋 Detailed Results
        <details>
        <summary>Click to expand detailed scan results</summary>

        ```
        SCAN_RESULTS_PLACEHOLDER
        ```
        </details>

        ---
        � **Full results available in [Security tab](SECURITY_TAB_URL)**
        COMMENT_EOF
          
          # Replace placeholders with actual values
          sed -i "s/CRITICAL_COUNT/$CRITICAL/g" pr_comment.md
          sed -i "s/HIGH_COUNT/$HIGH/g" pr_comment.md
          sed -i "s/MEDIUM_COUNT/$MEDIUM/g" pr_comment.md
          sed -i "s/LOW_COUNT/$LOW/g" pr_comment.md
          sed -i "s|SECURITY_TAB_URL|${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/security/code-scanning|g" pr_comment.md
          
          # Add warning if critical or high issues found
          if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
            sed -i "s/CRITICAL_WARNING/⚠️ **Action Required:** Critical or High severity issues found!/" pr_comment.md
          else
            sed -i "s/CRITICAL_WARNING//" pr_comment.md
          fi
          
          # Replace scan results (limit to first 100 lines to avoid size issues)
          head -100 trivy-iac-results.txt > scan_results_snippet.txt
          python3 << 'PYTHON_EOF'
        import re
        
        # Read the files
        with open('pr_comment.md', 'r') as f:
            content = f.read()
        
        with open('scan_results_snippet.txt', 'r') as f:
            scan_results = f.read()
        
        # Replace the placeholder
        content = content.replace('SCAN_RESULTS_PLACEHOLDER', scan_results)
        
        # Write back
        with open('pr_comment.md', 'w') as f:
            f.write(content)
        PYTHON_EOF
          
        else
          # No issues found - create simple success message
          cat > pr_comment.md << 'SUCCESS_EOF'
        ## ✅ Trivy IaC Security Scan Results

        **Scan Target:** `example_app/terraform-aws-eks`

        🎉 **No security issues found!** Your infrastructure configuration looks secure.

        ---
        📋 **Scan details available in [Security tab](SECURITY_TAB_URL)**
        SUCCESS_EOF
          
          # Replace security tab URL
          sed -i "s|SECURITY_TAB_URL|${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/security/code-scanning|g" pr_comment.md
        fi

    - name: Comment PR with scan results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const { owner, repo } = context.repo;
          const issue_number = context.issue.number;
          
          // Read the comment content from file
          const commentBody = fs.readFileSync('pr_comment.md', 'utf8');
          
          // Delete previous Trivy comments to avoid spam
          const comments = await github.rest.issues.listComments({
            owner,
            repo,
            issue_number,
          });
          
          for (const comment of comments.data) {
            if (comment.body.includes('🔒 Trivy IaC Security Scan Results') || 
                comment.body.includes('✅ Trivy IaC Security Scan Results')) {
              await github.rest.issues.deleteComment({
                owner,
                repo,
                comment_id: comment.id,
              });
            }
          }
          
          // Post new comment
          await github.rest.issues.createComment({
            owner,
            repo,
            issue_number,
            body: commentBody
          });

    - name: Display scan results
      if: always()
      run: |
        echo "=== Trivy IaC Scan Results ==="
        if [ -f trivy-iac-results.txt ] && [ -s trivy-iac-results.txt ]; then
          cat trivy-iac-results.txt
        else
          echo "No IaC security issues found!"
        fi

    - name: Archive scan results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: trivy-iac-scan-results
        path: |
          trivy-iac-results.sarif
          trivy-iac-results.txt
        retention-days: 30
