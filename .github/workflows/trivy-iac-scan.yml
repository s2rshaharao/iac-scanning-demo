name: Trivy IaC Security Scan

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  trivy-iac-scan:
    name: Trivy IaC Security Scan
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy IaC scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: 'example_app/learn-terraform-provision-eks-cluster'
        format: 'sarif'
        output: 'trivy-iac-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM,LOW,UNKNOWN'
        exit-code: '0'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-iac-results.sarif'
        category: 'trivy-iac-scan'

    - name: Check for dismissed alerts and reopen if issues persist
      uses: actions/github-script@v7
      continue-on-error: true
      if: always()
      with:
        script: |
          try {
            const fs = require('fs');
            
            // Wait a moment for SARIF upload to process
            await new Promise(resolve => setTimeout(resolve, 15000));
            
            // Get ALL alerts (any state) for debugging
            const allAlerts = await github.rest.codeScanning.listAlertsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            console.log(`üîç DEBUG: Total alerts in repo: ${allAlerts.data.length}`);
            
            // Group by state for debugging
            const alertsByState = allAlerts.data.reduce((acc, alert) => {
              acc[alert.state] = (acc[alert.state] || 0) + 1;
              return acc;
            }, {});
            
            console.log(`üìä Alerts by state:`, JSON.stringify(alertsByState, null, 2));
            
            // Get all dismissed alerts
            const dismissedAlerts = await github.rest.codeScanning.listAlertsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'dismissed'
            });
            
            console.log(`Found ${dismissedAlerts.data.length} dismissed alerts to check`);
            
            if (dismissedAlerts.data.length === 0) {
              console.log('No dismissed alerts to check');
              return;
            }
            
            // Get all current open alerts (includes newly created ones)
            const openAlerts = await github.rest.codeScanning.listAlertsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            
            console.log(`Found ${openAlerts.data.length} open alerts after scan`);
            
            let reopenedCount = 0;
            
            // For each dismissed alert, check if similar issue exists in open alerts
            for (const dismissedAlert of dismissedAlerts.data) {
              const ruleId = dismissedAlert.rule?.id;
              const filePath = dismissedAlert.most_recent_instance?.location?.path;
              
              if (!ruleId) continue;
              
              // Check if there's an open alert with the same rule in the same or similar location
              const similarOpenAlert = openAlerts.data.find(openAlert => 
                openAlert.rule?.id === ruleId &&
                openAlert.most_recent_instance?.location?.path === filePath
              );
              
              // Only reopen if we have a similar open alert (meaning the specific issue still exists)
              if (similarOpenAlert) {
                try {
                  await github.rest.codeScanning.updateAlert({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    alert_number: dismissedAlert.number,
                    state: 'open',
                    dismissed_comment: 'Reopened because the same security issue was found in latest scan'
                  });
                  
                  console.log(`‚úÖ Reopened dismissed alert #${dismissedAlert.number}: ${ruleId} in ${filePath} (found matching issue)`);
                  reopenedCount++;
                } catch (error) {
                  console.log(`‚ùå Failed to reopen alert #${dismissedAlert.number}: ${error.message}`);
                }
              } else {
                console.log(`‚úì Dismissed alert #${dismissedAlert.number} (${ruleId}) appears to be resolved - not reopening`);
              }
            }
            
            console.log(`\nüìä Alert reopening summary:`);
            console.log(`   Total dismissed alerts checked: ${dismissedAlerts.data.length}`);
            console.log(`   Alerts reopened: ${reopenedCount}`);
            console.log(`   Alerts left dismissed (likely fixed): ${dismissedAlerts.data.length - reopenedCount}`);
            
          } catch (error) {
            console.log('‚ùå Error in alert reopening logic:', error.message);
            console.log('Stack trace:', error.stack);
          }

    - name: Run Trivy IaC scan (table format)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: 'example_app/learn-terraform-provision-eks-cluster'
        format: 'table'
        severity: 'CRITICAL,HIGH,MEDIUM,LOW,UNKNOWN'
        output: 'trivy-iac-results.txt'

    - name: Display scan results
      if: always()
      run: |
        echo "=== Trivy IaC Scan Results ==="
        if [ -f trivy-iac-results.txt ]; then
          cat trivy-iac-results.txt
        else
          echo "No IaC security issues found!"
        fi

    - name: Archive scan results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: trivy-iac-scan-results
        path: |
          trivy-iac-results.sarif
          trivy-iac-results.txt
        retention-days: 30
