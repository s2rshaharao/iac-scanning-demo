name: Security Scan

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      security-events: write
      pull-requests: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Step 1: Secrets Detection
    - name: Install TruffleHog
      run: |
        curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin

    - name: Run secrets scan
      run: |
        trufflehog filesystem example_app/django-ecs-terraform --json > secrets-results.json || echo "[]" > secrets-results.json
        trufflehog filesystem example_app/django-ecs-terraform --format=sarif > secrets-results.sarif || echo '{"version":"2.1.0","$schema":"https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0.json","runs":[{"tool":{"driver":{"name":"TruffleHog"}},"results":[]}]}' > secrets-results.sarif

    - name: Upload secrets results to Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: secrets-results.sarif
        category: secrets-scan

    # Step 2: IaC Security Scan
    - name: Run Trivy IaC scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: 'example_app/django-ecs-terraform'
        format: 'sarif'
        output: 'iac-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM,LOW'

    - name: Run Trivy IaC scan for PR comment
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: 'example_app/django-ecs-terraform'
        format: 'table'
        output: 'iac-results.txt'
        severity: 'CRITICAL,HIGH,MEDIUM,LOW'

    - name: Upload IaC results to Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: iac-results.sarif
        category: iac-scan

    # Step 3: Create PR Comment
    - name: Create PR comment
      if: github.event_name == 'pull_request'
      run: |
        SECRETS_COUNT=$(cat secrets-results.json | jq -r 'length // 0')
        
        CRITICAL=0
        HIGH=0
        MEDIUM=0
        LOW=0
        
        if [ -f iac-results.txt ] && [ -s iac-results.txt ]; then
          CRITICAL=$(grep -c "CRITICAL" iac-results.txt || echo "0")
          HIGH=$(grep -c "HIGH" iac-results.txt || echo "0")
          MEDIUM=$(grep -c "MEDIUM" iac-results.txt || echo "0")
          LOW=$(grep -c "LOW" iac-results.txt || echo "0")
        fi
        
        cat > pr_comment.md << EOF
        ## üõ°Ô∏è Security Scan Results
        
        ### üîê Secrets Detection
        **Secrets Found:** $SECRETS_COUNT
        
        $(if [ "$SECRETS_COUNT" -gt 0 ]; then
          echo "‚ö†Ô∏è **CRITICAL: Secrets detected!**"
          echo ""
          echo "Found in:"
          cat secrets-results.json | jq -r '.[] | "- \(.SourceMetadata.Data.Filesystem.file):\(.SourceMetadata.Data.Filesystem.line)"'
        else
          echo "‚úÖ No secrets detected"
        fi)
        
        ### üîí IaC Security Issues
        | Severity | Count |
        |----------|-------|
        | Critical | $CRITICAL |
        | High | $HIGH |
        | Medium | $MEDIUM |
        | Low | $LOW |
        
        <details>
        <summary>View detailed results</summary>
        
        \`\`\`
        $(if [ -f iac-results.txt ]; then cat iac-results.txt; else echo "No issues found"; fi)
        \`\`\`
        </details>
        
        üìã Full results in [Security tab](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/security/code-scanning)
        EOF

    - name: Post PR comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const commentBody = fs.readFileSync('pr_comment.md', 'utf8');
          
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          for (const comment of comments.data) {
            if (comment.body.includes('üõ°Ô∏è Security Scan Results')) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id,
              });
            }
          }
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: commentBody
          });
